package com.hyy.hyydatalist.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hyy.hyydatalist.generator.Alarms;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ALARMS.
*/
public class AlarmsDao extends AbstractDao<Alarms, Long> {

    public static final String TABLENAME = "ALARMS";

    /**
     * Properties of entity Alarms.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Alarmtime = new Property(1, String.class, "alarmtime", false, "ALARMTIME");
        public final static Property Dayofweek = new Property(2, String.class, "dayofweek", false, "DAYOFWEEK");
        public final static Property Messageid = new Property(3, String.class, "messageid", false, "MESSAGEID");
        public final static Property Ispause = new Property(4, String.class, "ispause", false, "ISPAUSE");
    };


    public AlarmsDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ALARMS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ALARMTIME' TEXT," + // 1: alarmtime
                "'DAYOFWEEK' TEXT," + // 2: dayofweek
                "'MESSAGEID' TEXT," + // 3: messageid
                "'ISPAUSE' TEXT);"); // 4: ispause
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ALARMS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Alarms entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String alarmtime = entity.getAlarmtime();
        if (alarmtime != null) {
            stmt.bindString(2, alarmtime);
        }
 
        String dayofweek = entity.getDayofweek();
        if (dayofweek != null) {
            stmt.bindString(3, dayofweek);
        }
 
        String messageid = entity.getMessageid();
        if (messageid != null) {
            stmt.bindString(4, messageid);
        }
 
        String ispause = entity.getIspause();
        if (ispause != null) {
            stmt.bindString(5, ispause);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Alarms readEntity(Cursor cursor, int offset) {
        Alarms entity = new Alarms( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // alarmtime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dayofweek
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // messageid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // ispause
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Alarms entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAlarmtime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDayofweek(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessageid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIspause(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Alarms entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Alarms entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
