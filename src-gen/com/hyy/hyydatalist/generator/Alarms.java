package com.hyy.hyydatalist.generator;

import com.hyy.hyydatalist.generator.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ALARMS.
 */
public class Alarms {

    private Long id;
    private String alarmtime;
    private String dayofweek;
    private Long messageid;
    private String ispause;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AlarmsDao myDao;

    private Messages messages;
    private Long messages__resolvedKey;


    public Alarms() {
    }

    public Alarms(Long id) {
        this.id = id;
    }

    public Alarms(Long id, String alarmtime, String dayofweek, Long messageid, String ispause) {
        this.id = id;
        this.alarmtime = alarmtime;
        this.dayofweek = dayofweek;
        this.messageid = messageid;
        this.ispause = ispause;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAlarmsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getAlarmtime() {
        return alarmtime;
    }

    public void setAlarmtime(String alarmtime) {
        this.alarmtime = alarmtime;
    }

    public String getDayofweek() {
        return dayofweek;
    }

    public void setDayofweek(String dayofweek) {
        this.dayofweek = dayofweek;
    }

    public Long getMessageid() {
        return messageid;
    }

    public void setMessageid(Long messageid) {
        this.messageid = messageid;
    }

    public String getIspause() {
        return ispause;
    }

    public void setIspause(String ispause) {
        this.ispause = ispause;
    }

    /** To-one relationship, resolved on first access. */
    public Messages getMessages() {
        Long __key = this.messageid;
        if (messages__resolvedKey == null || !messages__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MessagesDao targetDao = daoSession.getMessagesDao();
            Messages messagesNew = targetDao.load(__key);
            synchronized (this) {
                messages = messagesNew;
            	messages__resolvedKey = __key;
            }
        }
        return messages;
    }

    public void setMessages(Messages messages) {
        synchronized (this) {
            this.messages = messages;
            messageid = messages == null ? null : messages.getId();
            messages__resolvedKey = messageid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
